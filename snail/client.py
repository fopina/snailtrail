from typing import Iterable
from . import gqlclient, web3client, gqltypes

LEAGUE_GOLD = 5
LEAGUE_PLATINUM = 6


class Client:
    def __init__(
        self,
        http_token=None,
        proxy=None,
        wallet=None,
        private_key=None,
        web3_provider=None,
        web3_provider_class=None,
    ):
        self.gql = gqlclient.Client(http_token=http_token, proxy=proxy)
        if wallet and private_key and web3_provider:
            self.web3 = web3client.Client(wallet, private_key, web3_provider, web3_provider_class=web3_provider_class)

    def _iterate_pages(self, method, key, klass=None, args=None, kwargs=None):
        args = args or []
        kwargs = kwargs or {}
        c = 0
        while True:
            kwargs['offset'] = c
            objs = method(*args, **kwargs)
            if not objs[key]:
                break
            total = objs.get('count')
            _r = map(klass, objs[key]) if klass else objs[key]
            yield from _r
            c += len(objs[key])
            if total is not None and c >= total:
                break

    def iterate_all_snails_marketplace(self, filters={}):
        yield from self._iterate_pages(
            self.gql.get_all_snails_marketplace, 'snails', klass=gqltypes.Snail, kwargs={'filters': filters}
        )

    def iterate_all_snails(self, filters={}) -> Iterable[gqltypes.Snail]:
        yield from self._iterate_pages(
            self.gql.get_all_snails, 'snails', klass=gqltypes.Snail, kwargs={'filters': filters}
        )

    def iterate_my_snails_for_missions(self, owner):
        yield from self._iterate_pages(
            self.gql.get_my_snails_for_missions, 'snails', klass=gqltypes.Snail, args=[owner]
        )

    def iterate_my_snails_for_ranked(self, owner, league):
        yield from self._iterate_pages(
            self.gql.get_my_snails_for_ranked, 'snails', klass=gqltypes.Snail, args=[owner, league]
        )

    def iterate_mission_races(self, filters={}):
        yield from self._iterate_pages(
            self.gql.get_mission_races, 'all', klass=gqltypes.Race, kwargs={'filters': filters}
        )

    def iterate_onboarding_races(self, filters={}):
        yield from self._iterate_pages(
            self.gql.get_onboarding_races, 'all', klass=gqltypes.Race, kwargs={'filters': filters}
        )

    def iterate_finished_races(self, filters={}, own=False):
        k = 'own' if own else 'all'
        yield from self._iterate_pages(
            self.gql.get_finished_races, k, klass=gqltypes.Race, kwargs={'filters': filters, 'own': own}
        )

    def iterate_race_history(self, filters={}):
        yield from self._iterate_pages(
            self.gql.get_race_history, 'races', klass=gqltypes.Race, kwargs={'filters': filters}
        )

    def join_mission_races(self, snail_id: int, race_id: int, address: str):
        """join mission race - signature is generated by `sign_daily_mission`"""
        signature = self.web3.sign_daily_mission(address, snail_id, race_id)
        return self.gql.join_mission_races(snail_id, race_id, address, signature)
